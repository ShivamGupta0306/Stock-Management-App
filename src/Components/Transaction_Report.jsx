import React, { useEffect, useState } from "react";
import "../App.css";
import Select from "react-select";
import { IoIosSearch } from "react-icons/io";
import axios from "axios";
import jsPDF from "jspdf";
import "jspdf-autotable";
import watermarkImage from '../assets/logo.jpeg'
import api from "./Api";

const UserList = () => {
  const [company, setCompany] = useState([[], [], [], [], [], [], []]);
  const [formData, setFormData] = useState({
    TranscationType: "",
    SerialNo: "",
    CompanyCode: "",
    Plant_Id: "",
    MCC_Id: "",
    Center_Code: "",
    UserId: "",
    DocketNo: "",
    FromDate: "",
    ToDate: "",
  });
  const [data, setData] = useState([]);

  // useEffect(() => {
  //   fetchData();
  // }, []);

  const fetchData = async (formData) => {
    try {
      // Fetch data from your API
      console.log(formData)
      const response = await api.post('http://182.18.144.204:50019/StockReports/RecieptNote', formData);
      setData(response.data.result.Table);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  const generatePdf = async () => {
    await fetchData(formData);
    var doc = new jsPDF();
    const imgWidth = 40; // Adjust as needed
    const imgHeight = 22; // Adjust as needed
    const x = 5; // Position at the left
    const y = 21; // Position at the top
  
    const groupedData = {};
  
    // Group data by docket number
    data.forEach((item) => {
      if (!groupedData[item.docketno]) {
        groupedData[item.docketno] = [];
      }
      groupedData[item.docketno].push(item);
    });
  
    // Iterate over each group and print on separate pages
    Object.keys(groupedData).forEach((docketNo, index) => {
      if (index !== 0) {
        doc.addPage(); // Add new page for each docket number except the first one
      }
      let yPosition = 20;
  
      // Set font style
      doc.setFontSize(22); // Increase font size
      doc.setFont("helvetica", "bold");
  
      doc.text(
        "Kanha Milk Testing Equipments Pvt. Ltd.",
        doc.internal.pageSize.width / 2,
        yPosition,
        { align: "center" }
      );
      yPosition += 15;
  
      doc.addImage(watermarkImage, "JPEG", x, y, imgWidth, imgHeight);
  
      // Set font style for "Transaction Challan" text
      doc.setFontSize(18); // Adjust font size for the "Transaction Challan" text
      doc.setFont("helvetica", "normal");
  
      doc.text(
        "Dispatch Challan",
        doc.internal.pageSize.width / 2,
        yPosition,
        { align: "center" }
      );
  
      // Adjust yPosition without margin between the heading and "Transaction Challan"
      yPosition += 18; // Adjust position based on font size
  
      doc.setFontSize(12);
      doc.setFont("helvetica", "normal");
  
      // Add docket no and received date
      doc.text(`Challan No: ${docketNo}`, 10, yPosition);
      doc.text(
        "Received Date: ________",
        doc.internal.pageSize.width - 80,
        yPosition
      );
      yPosition += 10;
  
      // Add item details table heading
      doc.setFontSize(16);
      doc.setTextColor(0, 0, 0);
      doc.setFillColor(211, 211, 211); // Light grey background
      doc.rect(
        10,
        yPosition,
        doc.internal.pageSize.width - 20,
        10,
        "F"
      ); // Draw background
      doc.text(
        "Item Details",
        doc.internal.pageSize.width / 2,
        yPosition + 7,
        "center"
      ); // Centered text
      yPosition += 15;
  
      // Add item details table
      const itemDetailsHeaders = [
        "S.no.",
        "Name",
        "Dispatch Quantity",
        "Received Quantity",
        "Item S.no.",
        "Status",
        "Remark",
      ];
  
      const itemDetailsData = groupedData[docketNo].map((item, itemIndex) => [
        itemIndex + 1,
        item.ItemName,
        item.Quantity,
        item.ReceivedQty,
        item.serialNo,
        item.Status,
        item.remark,
      ]);
      doc.autoTable({
        startY: yPosition,
        head: [itemDetailsHeaders],
        body: itemDetailsData,
        theme: "grid",
      });
  
      // Add Generated by and Received by
      doc.text(
        "Generated By: ________",
        15,
        doc.internal.pageSize.height - 10
      );
      doc.text(
        "Received By: ________",
        doc.internal.pageSize.width - 85,
        doc.internal.pageSize.height - 10
      );
  
      // Add docket number at the top right corner of each page
      doc.setFontSize(10);
      doc.text(
        `Docket No: ${docketNo}`,
        doc.internal.pageSize.width - 50,
        9
      );
    });
  
    // Save the PDF
    doc.save("generated.pdf");
  };
  
  

  useEffect(() => {
    async function fetchDetails() {
      const response = await api.post(
        "http://182.18.144.204:50019/StockReports/inventory",
        {}
      );
      setCompany([
        response.data.result.Table,
        response.data.result.Table1,
        response.data.result.Table2,
        response.data.result.Table3,
        response.data.result.Table4,
        response.data.result.Table5,
        response.data.result.Table6,
      ]);
      // setCompany([1][response.data.result.Table1]);
    }
    fetchDetails();
  }, []);

  const handleChange = (fieldName, selectedOption) => {
    setFormData({ ...formData, [fieldName]: selectedOption.value });
  };

  const handleDateChange = (e, fieldName) => {
    setFormData({ ...formData, [fieldName]: e.target.value });
  };

  const transactionOptions = [
    { value: "All", label: "All" },
    { value: "IN", label: "IN" },
    { value: "OUT", label: "OUT" },
    { value: "DISPATCH", label: "DISPATCH" },
    { value: "SPARE", label: "SPARE" },
    { value: "PendingIn", label: "Pending In" },
    { value: "PendingOut", label: "Pending Out" },
    { value: "Serialno", label: "Serial Wise" },
    { value: "Docketno", label: "Docket Wise" },
  ];

  const companyOptions = company[0].map((c) => ({
    value: c.id,
    label: c.name,
  }));

  const plantOptions = company[1].map((plant) => ({
    value: plant.id,
    label: plant.name,
  }));

  const bmcOptions = company[3].map((bmc) => ({
    value: bmc.id,
    label: bmc.name,
  }));

  const mccOptions = company[2].map((mcc) => ({
    value: mcc.id,
    label: mcc.name,
  }));

  const userOptions = company[4].map((user) => ({
    value: user.id,
    label: user.name,
  }));

  const serialno = company[5].map((serial) => ({
    value: serial.id,
    label: serial.name,
  }));

  const docketOptions = company[6].map((docket) => ({
    value: docket.id,
    label: docket.name,
  }));

  return (
    <div className="min-h-screen h-full">
      <div className="pt-10 mt-20">
        <h1 className="text-3xl mb-8 font-semibold ml-20 tracking-wider">
          Transaction Reports
        </h1>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-x-12 gap-10 place-items-center p-4 place-content-center max-w-5xl mx-auto mt-9">
          <div className="flex flex-col w-full justify-start">
            <label
              className="block text-left font-medium"
              htmlFor="TranscationType"
            >
              Report Type
            </label>
            <Select
              className="basic-single mt-2 w-full"
              classNamePrefix="select"
              name="TranscationType"
              options={transactionOptions}
              onChange={(selectedOption) =>
                handleChange("TranscationType", selectedOption)
              }
              // value={transactionOptions.find(option => option.value === formData.TransactionType)}
              // onChange={(selectedOption) => setFormData({ ...formData, TransactionType: selectedOption.value })}
            />
          </div>
          {formData.TranscationType === "Serialno" ? (
            <div className="flex flex-col w-full  justify-start">
              <label
                className="block text-left font-medium"
                htmlFor="TransactionType"
              >
                Serial no.
              </label>
              <Select
                className="basic-single mt-2 w-full"
                classNamePrefix="select"
                name="Serialno"
                options={serialno}
                onChange={(selectedOption) =>
                  handleChange("serialno", selectedOption)
                }
                // value={transactionOptions.find(option => option.value === formData.TransactionType)}
                // onChange={(selectedOption) => setFormData({ ...formData, TransactionType: selectedOption.value })}
              />
            </div>
          ) : null}
          {formData.TranscationType === "Docketno" ? (
            <div className="flex flex-col w-full justify-start">
              <label
                className="block text-left  font-medium"
                htmlFor="TransactionType"
              >
                Docket No.
              </label>
              <Select
                className="basic-single mt-2"
                classNamePrefix="select"
                name="docketno"
                options={docketOptions}
                onChange={(selectedOption) =>
                  handleChange("docketno", selectedOption)
                }
              />
            </div>
          ) : null}
          {formData.TranscationType !== "Serialno" &&
            formData.TranscationType !== "Docketno" && (
              <>
                <div
                  className={`flex flex-col w-full ${
                    formData.TranscationType === "Docketno" ? "hidden" : ""
                  } justify-start`}
                >
                  <label
                    className="block text-left font-medium"
                    htmlFor="TransactionType"
                  >
                    Company
                  </label>
                  <Select
                    className="basic-single mt-2 w-full"
                    classNamePrefix="select"
                    name="Company"
                    options={companyOptions}
                    onChange={(selectedOption) =>
                      handleChange("company", selectedOption)
                    }
                  />
                </div>
                <div className="flex flex-col w-full  justify-start">
                  <label
                    className="block text-left font-medium"
                    htmlFor="TransactionType"
                  >
                    Plant
                  </label>
                  <Select
                    className="basic-single w-full mt-2"
                    classNamePrefix="select"
                    name="Plant"
                    options={plantOptions}
                    onChange={(selectedOption) =>
                      handleChange("plant", selectedOption)
                    }
                  />
                </div>
                <div className="flex flex-col  w-full justify-start">
                  <label
                    className="block text-left font-medium"
                    htmlFor="TransactionType"
                  >
                    MCC
                  </label>
                  <Select
                    className="basic-single w-full mt-2"
                    classNamePrefix="select"
                    name="Mcc"
                    options={mccOptions}
                    onChange={(selectedOption) =>
                      handleChange("mcc", selectedOption)
                    }
                  />
                </div>
                <div className="flex flex-col w-full  justify-start">
                  <label
                    className="block text-left font-medium"
                    htmlFor="TransactionType"
                  >
                    BMC
                  </label>
                  <Select
                    className="basic-single w-full mt-2"
                    classNamePrefix="select"
                    name="Bmc"
                    options={bmcOptions}
                    onChange={(selectedOption) =>
                      handleChange("bmc", selectedOption)
                    }
                  />
                </div>
                <div className="flex flex-col w-full justify-start">
                  <label
                    className="block text-left  font-medium"
                    htmlFor="TransactionType"
                  >
                    Users
                  </label>
                  <Select
                    className="basic-single mt-2"
                    classNamePrefix="select"
                    name="Users"
                    options={userOptions}
                    onChange={(selectedOption) =>
                      handleChange("user", selectedOption)
                    }
                  />
                </div>
                <div>
                  <label htmlFor="FromDate">Date From:</label>
                  <input
                    type="date"
                    id="FromDate"
                    //   value={dateFrom}
                    onChange={(e) => handleDateChange(e, "FromDate")}
                    className="mt-1 p-2 rounded-md w-full"
                  />
                </div>
                <div>
                  <label htmlFor="ToDate">Date To:</label>
                  <input
                    type="date"
                    id="ToDate"
                    //   value={dateTo}
                    onChange={(e) => handleDateChange(e, "ToDate")}
                    className="mt-1 p-2 rounded-md w-full"
                  />
                </div>
              </>
            )}

          <div className="flex justify-start w-full">
            <button
              onClick={generatePdf}
              className="bg-blue-500 hover:bg-blue-700 text-white font-bold px-4 mt-7 py-2 rounded"
            >
              <IoIosSearch size={25} />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UserList;
